//harris角点检测测试 2020/1/16
	Temp_Buffer = SRC_2nd.clone();
	cout << Temp_Buffer.at<uchar>(2329, 29) << endl;

	cornerHarris(SRC_2nd,Temp_Buffer,11,11,0.03); //看起来输出的mat不能直接用imshow，不是可以显示的图像类型

	Temp_Array.push_back(Temp_Buffer);

	normalize(Temp_Buffer, Temp_Buffer, 0, 255, NORM_MINMAX);
	cout << Temp_Buffer.at<float>(2329, 29) << endl;

	Temp_Buffer.convertTo(Temp_Array[0], CV_8U);
	cout << Temp_Array[0].at<uchar>(2329, 29) << endl;

	imshow(window_name, Temp_Array[0]);
	waitKey(0);
//以上代码于2020/1/16调试通过，可圈出角点但是没什么卵用


#include <iostream>
#include "opencv2/core.hpp"
#ifdef HAVE_OPENCV_XFEATURES2D
#include "opencv2/highgui.hpp"
#include "opencv2/features2d.hpp"
#include "opencv2/xfeatures2d.hpp"

using namespace cv;
using namespace cv::xfeatures2d;
using std::cout;
using std::endl;

int main( int argc, char* argv[] )

{
    CommandLineParser parser( argc, argv, "{@input | box.png | input image}" );
    Mat src = imread( samples::findFile( parser.get<String>( "@input" ) ), IMREAD_GRAYSCALE );
    if ( src.empty() )
    {
        cout << "Could not open or find the image!\n" << endl;
        cout << "Usage: " << argv[0] << " <Input image>" << endl;
        return -1;
    }

    //-- Step 1: Detect the keypoints using SURF Detector
    int minHessian = 400;
    Ptr<SURF> detector = SURF::create( minHessian );
    std::vector<KeyPoint> keypoints;
    detector->detect( src, keypoints );

    //-- Draw keypoints
    Mat img_keypoints;
    drawKeypoints( src, keypoints, img_keypoints );
    //-- Show detected (drawn) keypoints
    imshow("SURF Keypoints", img_keypoints );

    waitKey();

    return 0;

}

#else
int main()
{
    std::cout << "This tutorial code needs the xfeatures2d contrib module to be run." << std::endl;
    return 0;
}
#endif

	//分开写的话性能有点差，算了合并一下拿个记事本存一下吧
	//暗的隶属度函数 membership function of dark
	if (z0 <= 0.3)
	{
		Ud = 1;
	}
	else if (z0 > 0.5)
	{
		Ud = 0;
	}
	else
	{
		Ud = (5.0)*(z0 - 0.5);
	}

	//灰的隶属度函数 membership function of gray
	if (z0 <= 0.3)
	{
		Ug = 0;
	}
	else if (z0 > 0.3 & z0 <= 0.5)
	{
		Ug = (-5.0)*(z0-0.7);
	}
	else if (z0 > 0.5 & z0 <= 0.7)
	{
		Ug = (5.0)*(z0 - 0.5);
	}
	else
	{
		Ug = 0;
	}

	//亮的隶属度函数 membership function of bright
	if (z0 <= 0.5)
	{
		Ub = 0;
	}
	else if (z0 > 0.7)
	{
		Ub = 1;
	}
	else
	{
		Ub = (5.0)*(z0 - 0.5);
	}