//harris角点检测测试 2020/1/16
	Temp_Buffer = SRC_2nd.clone();
	cout << Temp_Buffer.at<uchar>(2329, 29) << endl;

	cornerHarris(SRC_2nd,Temp_Buffer,11,11,0.03); //看起来输出的mat不能直接用imshow，不是可以显示的图像类型

	Temp_Array.push_back(Temp_Buffer);

	normalize(Temp_Buffer, Temp_Buffer, 0, 255, NORM_MINMAX);
	cout << Temp_Buffer.at<float>(2329, 29) << endl;

	Temp_Buffer.convertTo(Temp_Array[0], CV_8U);
	cout << Temp_Array[0].at<uchar>(2329, 29) << endl;

	imshow(window_name, Temp_Array[0]);
	waitKey(0);
//以上代码于2020/1/16调试通过，可圈出角点但是没什么卵用


#include <iostream>
#include "opencv2/core.hpp"
#ifdef HAVE_OPENCV_XFEATURES2D
#include "opencv2/highgui.hpp"
#include "opencv2/features2d.hpp"
#include "opencv2/xfeatures2d.hpp"

using namespace cv;
using namespace cv::xfeatures2d;
using std::cout;
using std::endl;

int main( int argc, char* argv[] )

{
    CommandLineParser parser( argc, argv, "{@input | box.png | input image}" );
    Mat src = imread( samples::findFile( parser.get<String>( "@input" ) ), IMREAD_GRAYSCALE );
    if ( src.empty() )
    {
        cout << "Could not open or find the image!\n" << endl;
        cout << "Usage: " << argv[0] << " <Input image>" << endl;
        return -1;
    }

    //-- Step 1: Detect the keypoints using SURF Detector
    int minHessian = 400;
    Ptr<SURF> detector = SURF::create( minHessian );
    std::vector<KeyPoint> keypoints;
    detector->detect( src, keypoints );

    //-- Draw keypoints
    Mat img_keypoints;
    drawKeypoints( src, keypoints, img_keypoints );
    //-- Show detected (drawn) keypoints
    imshow("SURF Keypoints", img_keypoints );

    waitKey();

    return 0;

}

#else
int main()
{
    std::cout << "This tutorial code needs the xfeatures2d contrib module to be run." << std::endl;
    return 0;
}
#endif


/*	//摄像机控制
	VideoCapture Cam1;

	namedWindow(window_name, WINDOW_NORMAL);
	//namedWindow(window_name, WINDOW_AUTOSIZE);
	imshow(window_name, SRC_2nd);
	waitKey(0);
	Temp_Array.push_back(SRC_2nd);

	vector<Point2f> IrisCords;
	int pressedKey;
	long int index = 0;
	Mat moveMap = Mat();
	moveMap.zeros(Size(1920, 1080), CV_8UC3);

	while(1) //此循环不可运行
	{
		IrisCords.push_back(IrisDect(Mat())); //还没有明确的图像，把轨迹绘制先写一下吧
		pressedKey = waitKey(30);
		if(pressedKey == 'e')
		{
			break;
		}
		if (index == 0)
		{
			circle(moveMap, IrisCords[index], 2, Scalar(0, 0, 255));
		}
		index++;
	}
	

	Temp_Buffer = Thershold_区域(SRC_2nd);
	Temp_Array.push_back(Temp_Buffer);
	//Temp_Buffer.release();
	imshow(window_name, Temp_Array[0]);
	waitKey(0);

	//第二部分的读取代码
	SRC_2nd = imread(Load_Path_2nd_2, IMREAD_GRAYSCALE);
	if (!SRC_2nd.data)
		{
			cout << "读取失败" << endl;
			return -1;
		}
	imshow(window_name, SRC_2nd);
	waitKey(0);
	Temp_Array.push_back(SRC_2nd);
	//读取代码结束

	Temp_Buffer = JiaoDian_SURF_CGYT(Temp_Array[0], Temp_Array[1]); //SURF方法+暴力匹配实现 20200215

	//vector<Point2f> subPix_Point;
	//subPix_Point = subPix_pt(Temp_Array[0]);

	//TrackBar_cgyt_canny(0, 0); //TrackBar重新熟悉

	//包含类的源文件该如何创建并添加至现有项目中？ 存在问题 20200318
	//Temp_Array.push_back(Conv_Cgyt(Temp_Array[0],SOBEL_CGYT)); 类的相关问题已在第三个项目中解决，至20200321未出现问题，一个源文件实现主函数，一个源文件实现类成员方法。而类定义写在另一个头文件中

	//FT_CGYT(Temp_Array[0]);  //傅里叶变换 20200323通过

	//int res_state = Calib_Cgyt(Temp_Array[0]); 注释与20200410
	//cout << res_state;

	Temp_Buffer = Anisotropic_Cgyt(Temp_Array[0], 20, 0.75, 10);
	imshow(window_name, Temp_Buffer);	
	imwrite("G:\\Pictures\\Test For Programming\\003.2.jpg", Temp_Buffer);
	cout << "end" << endl;
	waitKey(0);
	
	Temp_Buffer = AnisotropicMT_Cgyt(Temp_Array[0], 20, 0.75, 10);


	Temp_Buffer = WaveLetHarrD_CGYT(Temp_Array[0], 1);
	imshow(window_name, Temp_Buffer);
	waitKey(0);

	Temp_Array[0] = WaveLetHarrR_CGYT(Temp_Buffer, 1);
	imshow(window_name, Temp_Array[0]);
	waitKey(0);
*/

//第一次标定用的素材图片路径
	Source_Path[1] = "G:\\Pictures\\Test For Programming\\calb13\\2.jpg";
	Source_Path[2] = "G:\\Pictures\\Test For Programming\\calb13\\3.jpg";
	Source_Path[3] = "G:\\Pictures\\Test For Programming\\calb13\\4.jpg";
	Source_Path[4] = "G:\\Pictures\\Test For Programming\\calb13\\5.jpg";
	Source_Path[5] = "G:\\Pictures\\Test For Programming\\calb13\\6.jpg";
	Source_Path[6] = "G:\\Pictures\\Test For Programming\\calb13\\7.jpg";
	Source_Path[7] = "G:\\Pictures\\Test For Programming\\calb13\\8.jpg";
	Source_Path[8] = "G:\\Pictures\\Test For Programming\\calb13\\9.jpg";
	Source_Path[9] = "G:\\Pictures\\Test For Programming\\calb13\\10.jpg";