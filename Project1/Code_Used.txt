//此文档用于存放已经使用过的在主函数中测试各功能函数的配合代码

/*
	Temp_Buffer = Thershold_区域(SRC_2nd);
	Temp_Array.push_back(Temp_Buffer);
	//Temp_Buffer.release();
	imshow(window_name, Temp_Array[0]);
	waitKey(0);
	局部阈值测试代码，已验证，20191120
*/


/* 注释于2020/1/16
	xfeatures2d::HarrisLaplaceFeatureDetector HARRIS; //xfratures2d相关功能的测试，用于角点检测->图像拼接等
	std::vector<cv::KeyPoint> K_Points; //关键点？角点？
	Mat map = SRC_2nd.clone();
	HARRIS.compute(SRC_2nd, K_Points, map); //不敢跑 2019-12-3 还是要cmake编译？
	imshow(window_name, Temp_Array[0]);
	waitKey(0);
*/


//Temp_Buffer = JiaoDian_SURF_CGYT(Temp_Array[0], Temp_Array[1]); //SURF方法+暴力匹配实现 20200215
//LSD_cgyt(Temp_Array[0]);                                        //线段检测测试代码 20200220
//DST_2nd = FenShuiLing_CGYT(Temp_Array[0]);                      //分水岭分割代码实现 20200222
//Temp_Buffer = FAST_dect_Cgyt(Temp_Array[0], Temp_Array[1]);     //FAST特征检测+Brief描述符+K-NN匹配实现 20200224 
//cout << Solve_Cgyt(0.73) << endl;                               //迭代求解测试 20200303


//以下是亚像素检测实现的前置处理

	Temp_Buffer = Gaosi_双边(Temp_Array[0]); //高斯滤波+锐化
	//imshow(window_name, Temp_Buffer);
	//waitKey(0);
	Temp_Array.push_back(Temp_Buffer);

	Canny(Temp_Array[1], Temp_Buffer, 80, 240); //canny边缘检测
	//imshow(window_name, Temp_Buffer);
	//waitKey(0);
	Temp_Array.push_back(Temp_Buffer);

	vector<vector<Point>> Contours_Dected, Contours_Seletced;
	vector<Point> Contours_for_SubPixCont;
	vector<Point2d> Contours_subPix_result;
	Moments 矩;
	findContours(Temp_Array[2], Contours_Dected, RETR_EXTERNAL, CHAIN_APPROX_NONE, Point());  //圆形特征初步定位	
	for (int i = 0; i < Contours_Dected.size(); i++)
	{
		size_t k = Contours_Dected[i].size();
		if (k < 1000 && k > 700)
		{
			矩 = moments(Contours_Dected[i]);
			if (abs(矩.nu11) < 0.001)
			{
				//判定归一化的高阶中心距作为判断标准，可能四个三阶归一化中心矩均为极小数10e-4级别可认为在x、y方向均不存在偏向性，可认为该形状本身旋转不变		
				Contours_Seletced.push_back(Contours_Dected[i]);
			}
		}
	}
	Contours_for_SubPixCont = Contours_Seletced[0];
	cvtColor(Temp_Array[0], Temp_Buffer, COLOR_GRAY2BGR);
	drawContours(Temp_Buffer, Contours_Seletced, -1, Scalar(0, 0, 255));
	imshow(window_name, Temp_Buffer);
	waitKey(0);
	Temp_Array.push_back(Temp_Buffer); //指针问题未明确，注意传输地址导致vector容器中内容一致的可能


	/*
	Temp_Array检查
	for (int k = 0; k < Temp_Array.size(); k++)
	{
		imshow(window_name, Temp_Array[k]);
		cout << k << endl;
		waitKey(0);
	}
	*/

	//Temp_Array[1]是canny检测结果
	//SubPixel_Contours_Cgyt(Temp_Array[1],Contours_for_SubPixCont);
	
	//亚像素边缘检测代码
	//Contours_subPix_result = SubPixel_Contours_Cgyt(Temp_Array[0], Contours_for_SubPixCont);

}

//以下启动测试 空间矩亚像素检测需要亚像素检测的前置代码，从code_used中转移至此 20200415 注意重复
	//以下是亚像素检测实现的前置处理
	Temp_Buffer = Gaosi_双边(Temp_Array[0]); //高斯滤波+锐化
	//imshow(window_name, Temp_Buffer);
	//waitKey(0);
	Temp_Array.push_back(Temp_Buffer);

	Canny(Temp_Array[1], Temp_Buffer, 80, 240); //canny边缘检测
	//imshow(window_name, Temp_Buffer);
	//waitKey(0);
	Temp_Array.push_back(Temp_Buffer);

	vector<vector<Point>> Contours_Dected, Contours_Seletced;
	vector<Point> Contours_for_SubPixCont;
	vector<Point2d> Contours_subPix_result;
	Moments 矩;
	findContours(Temp_Array[2], Contours_Dected, RETR_EXTERNAL, CHAIN_APPROX_NONE, Point());  //圆形特征初步定位	
	for (int i = 0; i < Contours_Dected.size(); i++)
	{
		size_t k = Contours_Dected[i].size();
		if (k < 1000 && k > 700)
		{
			矩 = moments(Contours_Dected[i]);
			if (abs(矩.nu11) < 0.001)
			{
				//判定归一化的高阶中心距作为判断标准，可能四个三阶归一化中心矩均为极小数10e-4级别可认为在x、y方向均不存在偏向性，可认为该形状关于X，Y轴均对称		
				Contours_Seletced.push_back(Contours_Dected[i]);
			}
		}
	}
	Contours_for_SubPixCont = Contours_Seletced[0];
	cvtColor(Temp_Array[0], Temp_Buffer, COLOR_GRAY2BGR);
	drawContours(Temp_Buffer, Contours_Seletced, -1, Scalar(0, 0, 255));
	imshow(window_name, Temp_Buffer);
	waitKey(0);
	Temp_Array.push_back(Temp_Buffer); //指针问题未明确，注意传输地址导致vector容器中内容一致的可能

	//亚像素边缘检测代码
	Contours_subPix_result = SubPixel_Contours_Cgyt(Temp_Array[0], Contours_for_SubPixCont, 2);

保边滤波对比 20200424转移
	Temp_Buffer = Gaosi_双边(Temp_Array[0]);
	imshow(window_name, Temp_Buffer);
	waitKey(0);
	
	Temp_Buffer = NLM_CGYT(Temp_Array[0]); //也是属于实时性极差，如果没有并行计算加速，几乎不可能
	imshow(window_name, Temp_Buffer);
	waitKey(0);


GPU初次测试，图像加减的配合代码  20200706转移
	SRC_2nd = imread(LoadPath_Msi_2, IMREAD_COLOR);
	Temp_Buffer = imread(LoadPath_Msi_3, IMREAD_COLOR);
	Temp_Array.push_back(SRC_2nd);
	imshow(window_name, Temp_Buffer);
	waitKey(0);
	Temp_Array.push_back(Temp_Buffer);
	GPU_func_study(Temp_Array[0], Temp_Array[1]);